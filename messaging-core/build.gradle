plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.apollographql.apollo3'
    id 'maven-publish'
    id 'kotlin-parcelize'
}

group buildConfig.groupId

android {
    namespace = 'com.nabla.sdk.messaging.core'

    compileSdk buildConfig.compileSdk

    defaultConfig {
        minSdk buildConfig.minSdk
        targetSdk buildConfig.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro', 'serialization-rules.pro'

        aarMetadata {
            minCompileSdk buildConfig.compileSdk
        }
    }

    compileOptions {
        sourceCompatibility buildConfig.jvmTarget
        targetCompatibility buildConfig.jvmTarget
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
        disable 'VisibleForTests'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    // we don't want it for test src, see https://stackoverflow.com/questions/64267076
    if (!it.name.contains("Test")) {
        kotlinOptions.freeCompilerArgs += "-Xexplicit-api=strict"
    }

    kotlinOptions.freeCompilerArgs += "-opt-in=com.nabla.sdk.core.annotation.NablaInternal"
    kotlinOptions.freeCompilerArgs += "-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}

publishing.publications.all {
    if (it.name == 'apollo') {
        alias true
    }
}

apollo {
    packageName.set("com.nabla.sdk.messaging.graphql")
    generateTestBuilders.set(true)
    generateAsInternal.set(true)
}

dependencies {
    api project(':core')
    apolloMetadata(project(":core"))

    implementation libs.apollo.runtime
    implementation libs.apollo.cache
    implementation libs.apollo.cache.sqlite
    implementation libs.apollo.adapters

    runtimeOnly libs.kotlin.coroutines.android

    testImplementation project(':core-test-fixtures')
    testImplementation project(':messaging-core-test-fixtures')
    testImplementation libs.junit
    testImplementation libs.android.junit
    testImplementation libs.turbine
    testImplementation libs.okreplay
    testImplementation libs.kotlin.test
    testImplementation libs.mockk
    testImplementation libs.roboelectric
}
