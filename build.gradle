// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext.buildConfig = [
        'compileSdk': 33,
        'minSdk'    : 23,
        'targetSdk' : 33,
        'jvmTarget' : JavaVersion.VERSION_11,
        'groupId'   : 'com.nabla.sdk',
    ]

    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }

    dependencies {
        classpath libs.android.pluginGradle
        classpath libs.kotlin.pluginGradle
        classpath libs.kotlin.serialization.pluginGradle
        classpath libs.apollo.pluginGradle
        classpath libs.ktlint.pluginGradle
        classpath libs.kotlin.binaryCompatibilityValidator.pluginGradle
        classpath libs.gradle.dependencyAnalysis.pluginGradle
        classpath libs.paparazzi.pluginGradle
    }
}

// binary-compatibility-validator configuration
apply plugin: 'org.jetbrains.kotlinx.binary-compatibility-validator'

apiValidation {
    ignoredProjects += ["messaging-sample-app", "messaging-ui-tests", "messaging-core-test-fixtures", "core-test-fixtures", "tests-common"]
    nonPublicMarkers += ["com.nabla.sdk.core.annotation.NablaInternal", "androidx.annotation.VisibleForTesting"]
    ignoredPackages += [
        "com.nabla.sdk.messaging.ui.databinding",
        "com.nabla.sdk.scheduling.databinding",
        "com.nabla.sdk.videocall.databinding",
        "com.nabla.sdk.core.databinding",
        "com.nabla.sdk.docscanner.databinding",
        "com.nabla.sdk.graphql",
        "com.nabla.sdk.core.graphql",
        "com.nabla.sdk.docscanner.ml",
    ]
    ignoredClasses += [
        "com.nabla.sdk.core.BuildConfig",
        "com.nabla.sdk.core.api.BuildConfig",
        "com.nabla.sdk.core.annotation.NablaInternal",
        "com.nabla.sdk.core.reporting.BuildConfig",
        "com.nabla.sdk.docscanner.BuildConfig",
        "com.nabla.sdk.scheduling.BuildConfig",
        "com.nabla.sdk.videocall.BuildConfig",
    ]
}

// dependencies-analysis configuration
// run './gradlew buildHealth' to check the whole project dependencies
apply plugin: 'com.autonomousapps.dependency-analysis'

dependencyAnalysis {
    issues {
        all {
            onAny {
                severity('fail')
            }
            onUsedTransitiveDependencies {
                severity('ignore')
            }
            onIncorrectConfiguration {
                severity('fail')
                // We allow api config for :core dependency to support use case where consumer is just importing feature module.
                exclude(':core')
            }
            ignoreKtx(true)
        }
    }
    dependencies {
        bundle("apollo-normalized-cache-sqlite") {
            includeGroup("com.apollographql.apollo3")
        }
        bundle("robolectric") {
            includeGroup("org.robolectric")
        }
        bundle("exoplayer") {
            includeGroup("com.google.android.exoplayer")
        }
    }
}

subprojects { project ->
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    ktlint {
        setVersion(libs.versions.ktlint.get())
    }

    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach { task ->
        kotlinOptions {
            allWarningsAsErrors = true
            jvmTarget = buildConfig.jvmTarget
            freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
            def projectsRespectingNablaInternal = ["messaging-sample-app"]
            def projectRespectsNablaInternal = projectsRespectingNablaInternal.any { project.name.contains(it) }
            if (!projectRespectsNablaInternal) {
                freeCompilerArgs += "-opt-in=com.nabla.sdk.core.annotation.NablaInternal"
            }
            // Some AndroidX lib start using kotlin interfaces with non abstract fun
            // https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.jvm/-jvm-default/
            freeCompilerArgs += "-Xjvm-default=all"
            def projectsIgnoringStrictApi = ["ui-tests", "test-fixtures", "tests-common"]
            def projectIgnoresStrictApi = projectsIgnoringStrictApi.any { project.name.contains(it) }
            if (!task.name.contains("Test") && !projectIgnoresStrictApi) {
                freeCompilerArgs += "-Xexplicit-api=strict"
            }
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}