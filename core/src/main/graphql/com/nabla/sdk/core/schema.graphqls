scalar DateTime
scalar UUID

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  conversations(page: OpaqueCursorPage!): ConversationsOutput!

  conversation(id: UUID!): ConversationOutput!
}

type Mutation {
  createConversation(title: String, providerIds: [UUID!], initialMessage: SendMessageInput): CreateConversationOutput!

  sendMessageV2(conversationId: UUID!, input: SendMessageInput!): SendMessageOutput!

  sendMessage(
    conversationId: UUID!
    content: SendMessageContentInput!
    clientId: UUID!
    replyToMessageId: UUID
  ): SendMessageOutput! @deprecated

  deleteMessage(id: UUID!): DeleteMessageOutput!

  markAsSeen(conversationId: UUID!): MarkConversationAsSeenOutput!

  setTyping(conversationId: UUID!, isTyping: Boolean!): SetTypingOutput!

  registerOrUpdateDevice(deviceId: UUID, device: DeviceInput!): UpdateDeviceOutput!
}

type Subscription {
  conversations: ConversationsEventOutput

  conversation(id: UUID!): ConversationEventOutput
}

type Patient {
  id: UUID!
}

type EphemeralUrl {
  url: String!
  expiresAt: DateTime!
}

type System {
  name: String!
  avatar: ImageFileUpload
}

type Provider {
  id: UUID!

  prefix: String
  firstName: String!
  lastName: String!

  avatarUrl: EphemeralUrl
}

type DeletedProvider {
  _: EmptyObject!
}

union MaybeProvider = Provider | DeletedProvider

union MessageAuthor = System | Patient | Provider | DeletedProvider

type Message {
  id: UUID!

  author: MessageAuthor!
  conversation: Conversation!
  createdAt: DateTime!

  content: MessageContent!

  clientId: UUID
  replyTo: Message
}

type ConversationActivity {
  id: UUID!

  conversation: Conversation!

  createdAt: DateTime!
  activityTime: DateTime!

  content: ConversationActivityContent!
}

union ConversationActivityContent = ProviderJoinedConversation

type Conversation {
  id: UUID!

  title: String
  description: String
  subtitle: String
  createdAt: DateTime!
  updatedAt: DateTime!

  inboxPreviewTitle: String!
  lastMessagePreview: String
  unreadMessageCount: Int!

  providers: [ProviderInConversation!]!
  items(page: OpaqueCursorPage!): ConversationItemsPage!
}

type ProviderInConversation {
  id: UUID!

  provider: Provider!

  typingAt: DateTime
  seenUntil: DateTime
}

union ConversationItem = Message | ConversationActivity

type ConversationItemsPage {
  data: [ConversationItem]!
  hasMore: Boolean!
  nextCursor: String
}

union MessageContent =
    TextMessageContent
  | ImageMessageContent
  | VideoMessageContent
  | DocumentMessageContent
  | DeletedMessageContent
  | AudioMessageContent
  | LivekitRoomMessageContent

type TextMessageContent {
  text: String!
}

interface IFileUpload {
  id: UUID!

  url: EphemeralUrl!
  fileName: String!
  mimeType: String!
}

type ImageFileUpload implements IFileUpload {
  id: UUID!

  url: EphemeralUrl!
  fileName: String!
  mimeType: String!

  width: Int
  height: Int
}

type VideoFileUpload implements IFileUpload {
  id: UUID!

  url: EphemeralUrl!
  fileName: String!
  mimeType: String!

  durationMs: Int
  width: Int
  height: Int
}

type DocumentFileUpload implements IFileUpload {
  id: UUID!

  url: EphemeralUrl!
  fileName: String!
  mimeType: String!

  thumbnail: ImageFileUpload
}

type AudioFileUpload implements IFileUpload {
  id: UUID!

  url: EphemeralUrl!
  fileName: String!
  mimeType: String!

  durationMs: Int
}

type ImageMessageContent {
  imageFileUpload: ImageFileUpload!
}

type VideoMessageContent {
  videoFileUpload: VideoFileUpload!
}

type DocumentMessageContent {
  documentFileUpload: DocumentFileUpload!

  title: String
}

type AudioMessageContent {
  audioFileUpload: AudioFileUpload!
}

enum EmptyObject {
  EMPTY
}

type DeletedMessageContent {
  _: EmptyObject!
}

type LivekitRoomMessageContent {
  livekitRoom: LivekitRoom!
}

input OpaqueCursorPage {
  cursor: String
  # Leave null to let the backend pick a default value.
  # Max number you can ask is <some_big_but_not_too_big_number>.
  numberOfItems: Int
}

type ConversationsOutput {
  conversations: [Conversation!]!

  nextCursor: String
  hasMore: Boolean!
}

type ConversationOutput {
  conversation: Conversation!
}

input SendMessageInput {
  content: SendMessageContentInput!
  clientId: UUID!
  replyToMessageId: UUID
}

# This is a oneOf input, i.e. there is _exactly one_ non null attribute.
input SendMessageContentInput {
  textInput: SendTextMessageInput
  imageInput: SendImageMessageInput
  videoInput: SendVideoMessageInput
  documentInput: SendDocumentMessageInput
  audioInput: SendAudioMessageInput
}

input SendTextMessageInput {
  text: String!
}

input UploadInput {
  uuid: UUID!
}

input SendImageMessageInput {
  upload: UploadInput!
}

input SendVideoMessageInput {
  upload: UploadInput!
}

input SendDocumentMessageInput {
  upload: UploadInput!
}

input SendAudioMessageInput {
  upload: UploadInput!
}

type SendMessageOutput {
  message: Message!
}

type DeleteMessageOutput {
  message: Message!
}

type MarkConversationAsSeenOutput {
  conversation: Conversation!
}

type SetTypingOutput {
  conversation: Conversation!
}

type CreateConversationOutput {
  conversation: Conversation!
}

type SubscriptionReadinessEvent {
  isReady: Boolean!
}

union ConversationsEvent =
    SubscriptionReadinessEvent
  | ConversationCreatedEvent
  | ConversationUpdatedEvent
  | ConversationDeletedEvent

type ConversationsEventOutput {
  event: ConversationsEvent!
}

type ConversationCreatedEvent {
  conversation: Conversation!
}

type ConversationUpdatedEvent {
  conversation: Conversation!
}

type ConversationDeletedEvent {
  conversationId: UUID!
}

union ConversationEvent =
    SubscriptionReadinessEvent
  | ConversationActivityCreated
  | MessageCreatedEvent
  | MessageUpdatedEvent
  | TypingEvent

type ConversationEventOutput {
  event: ConversationEvent!
}

# --- Conversation Events

type ConversationActivityCreated {
  activity: ConversationActivity!
}

type MessageCreatedEvent {
  message: Message!
}

type MessageUpdatedEvent {
  message: Message!
}

type TypingEvent {
  provider: ProviderInConversation!
}

# --- Conversation Activity Contents

type ProviderJoinedConversation {
  provider: MaybeProvider!
}

# --- LiveKit rooms.

type LivekitRoom {
  uuid: UUID!
  status: LivekitRoomStatus!
}

union LivekitRoomStatus = LivekitRoomOpenStatus | LivekitRoomClosedStatus

type LivekitRoomOpenStatus {
  url: String!
  token: String!
}

type LivekitRoomClosedStatus {
  _: EmptyObject!
}

input DeviceInput {
  deviceModel: String!
  os: DeviceOs!
  osVersion: String!
  codeVersion: Int!
  sdkModules: [SdkModule!]!
}

type UpdateDeviceOutput {
  deviceId: UUID!
}

enum DeviceOs {
  ANDROID
  IOS
}

enum MutationStatus {
  SUCCESS
}

enum SdkModule {
  MESSAGING
  VIDEO_CALL
  VIDEO_CALL_SCHEDULING
}

#
