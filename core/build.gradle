plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.plugin.serialization'
    id 'com.apollographql.apollo3'
    id 'maven-publish'
}

group buildConfig.groupId

android {
    namespace = 'com.nabla.sdk.core'

    compileSdk buildConfig.compileSdk

    defaultConfig {
        minSdk buildConfig.minSdk
        targetSdk buildConfig.targetSdk

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-rules.pro', 'serialization-rules.pro'

        aarMetadata {
            minCompileSdk buildConfig.compileSdk
        }

        buildConfigField 'String', 'VERSION_NAME', "\"${getGitDescribe()}\""
    }

    compileOptions {
        sourceCompatibility buildConfig.jvmTarget
        targetCompatibility buildConfig.jvmTarget
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
        disable 'VisibleForTests'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed"
            }
        }
    }
}

String getGitDescribe() {
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--always'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    // we don't want it for test src, see https://stackoverflow.com/questions/64267076
    if (!it.name.contains("Test")) {
        kotlinOptions.freeCompilerArgs += "-Xexplicit-api=strict"
    }

    kotlinOptions.freeCompilerArgs += "-opt-in=com.nabla.sdk.core.annotation.NablaInternal"
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.release
            }
        }
    }
}

apollo {
    packageName.set("com.nabla.sdk.graphql")
    mapScalar("UUID", "com.benasher44.uuid.Uuid", "com.nabla.sdk.core.data.apollo.adapter.uuidAdapter")
    mapScalar("DateTime", "kotlinx.datetime.Instant", "com.apollographql.apollo3.adapter.KotlinxInstantAdapter")
    generateApolloMetadata.set(true)
}

dependencies {
    api libs.kotlin.datetime
    api libs.uuid
    api libs.okhttp
    api libs.androidx.appcompat

    implementation libs.okhttp.logging
    implementation libs.retrofit
    implementation libs.retrofit.kotlin.serialization
    implementation libs.jwtdecode
    implementation libs.apollo.runtime
    implementation libs.apollo.cache
    implementation libs.apollo.cache.sqlite
    implementation libs.androidx.startup
    implementation libs.androidx.core.ktx
    implementation libs.androidx.fragment.ktx
    implementation libs.google.material
    implementation libs.kotlin.serialization.json
    implementation libs.kotlin.coroutines.core

    compileOnly libs.androidx.annotation

    testImplementation project(':core-test-fixtures')
    testImplementation libs.turbine
    testImplementation libs.junit
    testImplementation libs.kotlin.test
    testImplementation libs.mockk
}
